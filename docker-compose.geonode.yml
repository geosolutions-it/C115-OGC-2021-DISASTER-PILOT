version: '3.4'
services:

# Common Django template for GeoNode and Celery services below
x-common-django:
  &default-common-django
  image: ${COMPOSE_PROJECT_NAME}_django:latest
  restart: on-failure
  env_file:
    - .env
  volumes:
    # - '.:/usr/src/hsr'
    - statics:/mnt/volumes/statics
    - geoserver-data-dir:/geoserver_data/data
    - backup-restore:/backup_restore
    - data/:/data
    - tmp:/tmp
  extra_hosts:
    - "geoserver:10.0.0.124"

services:

  # Our custom django application. It includes Geonode.
  django:
    << : *default-common-django
    build:
      context: ./
      dockerfile: Dockerfile
    container_name: django4${COMPOSE_PROJECT_NAME}
    healthcheck:
      test: "curl --fail --silent --write-out 'HTTP CODE : %{http_code}\n' --output /dev/null http://127.0.0.1:8001/"
      interval: 60s
      timeout: 10s
      retries: 1
      start_period: 60s
    environment:
      - IS_CELERY=False
    entrypoint: ["/usr/src/hsr/entrypoint.sh"]
    command: "uwsgi --ini /usr/src/hsr/uwsgi.ini"
    extra_hosts:
      - "geoserver:10.0.0.124"

  # Celery worker that executes celery tasks created by Django.
  celery:
    << : *default-common-django
    image: ${COMPOSE_PROJECT_NAME}_django:latest
    container_name: celery4${COMPOSE_PROJECT_NAME}
    depends_on:
      - django
    environment:
      - IS_CELERY=True
    entrypoint: ["/usr/src/hsr/entrypoint.sh"]
    command: "celery-cmd"
    extra_hosts:
      - "geoserver:10.0.0.124"

  # Nginx is serving django static and media files and proxies to django and geonode
  geonode:
    image: geonode/nginx:3.x
    build: ./docker/nginx/
    container_name: nginx4${COMPOSE_PROJECT_NAME}
    environment:
      - HTTPS_HOST=${HTTPS_HOST}
      - HTTP_HOST=${HTTP_HOST}
      - HTTPS_PORT=${HTTPS_PORT}
      - HTTP_PORT=${HTTP_PORT}
      - LETSENCRYPT_MODE=${LETSENCRYPT_MODE}
      - RESOLVER=127.0.0.11
    ports:
      - "${HTTP_PORT}:80"
      - "${HTTPS_PORT}:443"
    volumes:
      - nginx-confd:/etc/nginx
      - nginx-certificates:/geonode-certificates
      - statics:/mnt/volumes/statics
    restart: on-failure
    extra_hosts:
      - "geoserver:10.0.0.124"
      - "celerymonitor:10.0.0.124"

  # Gets and installs letsencrypt certificates
  letsencrypt:
    image: geonode/letsencrypt:latest
    build: ./docker/letsencrypt/
    container_name: letsencrypt4${COMPOSE_PROJECT_NAME}
    environment:
      - HTTPS_HOST=${HTTPS_HOST}
      - HTTP_HOST=${HTTP_HOST}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - LETSENCRYPT_MODE=${LETSENCRYPT_MODE}
      - RESOLVER=1.1.1.1
    volumes:
      - nginx-certificates:/geonode-certificates
    restart: on-failure
    extra_hosts:
      - "geoserver:10.0.0.124"

  # Geoserver backend
  #geoserver:
  #  image: geonode/geoserver:2.18.2
  #  build: ./docker/geoserver/
  #  network_mode: host
  #  container_name: geoserver4${COMPOSE_PROJECT_NAME}
  #  healthcheck:
  #    test: "curl --fail --silent --write-out 'HTTP CODE : %{http_code}\n' --output /dev/null http://127.0.0.1:8080/geoserver/rest/workspaces/geonode.html"
  #    interval: 60s
  #    timeout: 10s
  #    retries: 1
  #    start_period: 60s
  #  env_file:
  #    - .env
  #  volumes:
  #    - /mnt/efs/fs1/volumes/statics/:/mnt/volumes/statics
  #    - geoserver-data-dir:/geoserver_data/data
  #    - /mnt/efs/fs1/volumes/backup-restore:/backup_restore
  #    - data:/data
  #    - tmp:/tmp
  #  restart: on-failure

    #data-dir-conf:
    #image: geonode/geoserver_data:2.18.2
    #container_name: gsconf4${COMPOSE_PROJECT_NAME}
    #network_mode: host
    #command: /bin/true
    #volumes:
    #  - geoserver-data-dir:/geoserver_data/data
    #restart: on-failure

  # PostGIS database.
  db:
    # use geonode official postgis 13 image
    image: geonode/postgis:13
    command: postgres -c "max_connections=${POSTGRESQL_MAX_CONNECTIONS}"
    container_name: db4${COMPOSE_PROJECT_NAME}
    env_file:
      - .env
    volumes:
      - dbdata:/var/lib/postgresql/data
      - dbbackups:/pg_backups
    restart: on-failure
    # uncomment to enable remote connections to postgres
    ports:
      - "5432:5432"

  # Vanilla RabbitMQ service. This is needed by celery
  rabbitmq:
    image: rabbitmq:3.7-alpine
    container_name: rabbitmq4${COMPOSE_PROJECT_NAME}
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    restart: on-failure

        #jenkins:
        #image: jenkins/jenkins:lts
        #network_mode: host
        #image: istresearch/jenkins:latest
        #container_name: jenkins4${COMPOSE_PROJECT_NAME}
        #user: jenkins
        #ports:
        #- '${JENKINS_HTTP_PORT}:${JENKINS_HTTP_PORT}'
        #- '${JENKINS_HTTPS_PORT}:${JENKINS_HTTPS_PORT}'
        #- '50000:50000'
        #network_mode: "host"
        #volumes:
        #- jenkins_data:/var/jenkins_home
        #- /mnt/efs/fs1/volumes/backup-restore:/backup_restore
        #- /mnt/efs/fs1/volumes/data/:/data
        #environment:
        #- 'JENKINS_OPTS=--httpPort=${JENKINS_HTTP_PORT} --httpsPort=${JENKINS_HTTPS_PORT} --prefix=/jenkins'
        #extra_hosts:
        #- "geoserver:10.0.0.124"
        #- "django:10.0.0.215"
        #- "geonode:10.0.0.215"
        #- "celery:10.0.0.215"
        #- "letsencrypt:10.0.0.215"
        #- "rabbitmq:10.0.0.215"
        #- "jenkins:10.0.0.215"
        #- "db:10.0.0.215"

volumes:
  jenkins_data:
    driver: local
  nginx-confd:
    name: ${COMPOSE_PROJECT_NAME}-nginxconfd
  nginx-certificates:
    name: ${COMPOSE_PROJECT_NAME}-nginxcerts
  rabbitmq:
    name: ${COMPOSE_PROJECT_NAME}-rabbitmq
  dbdata:
    name: ${COMPOSE_PROJECT_NAME}-dbdata
  dbbackups:
    name: ${COMPOSE_PROJECT_NAME}-dbbackups
  data:
    driver: local
    driver_opts:
       o: bind
       type: none
       device: /mnt/efs/fs1/volumes/data
  geoserver-data-dir:
    #name: ${COMPOSE_PROJECT_NAME}-gsdatadir
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /mnt/efs/fs1/volumes/geoserver-data-dir
  tmp:
    name: ${COMPOSE_PROJECT_NAME}-tmp
  backup-restore:
    #name: ${COMPOSE_PROJECT_NAME}-backup-restore
    driver: local
    driver_opts:
      o: bind
      type: none
      device: /mnt/efs/fs1/volumes/backup-restore
  statics:
    driver: local
    driver_opts:
       o: bind
       type: none
       device: /mnt/efs/fs1/volumes/statics

